Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: instances.csv
  results_file: out.txt
  root_path: ../safety_benchmarks/benchmarks/baseline
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: baseline_model
  path: ../safety_benchmarks/benchmarks/baseline/pytorch/baseline_pytorch_model.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: [-1, 1, 187]
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: null
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: null
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 512
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    activation_bound_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 50
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 120
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: depth_first
  cut:
    enabled: false
    cuts_path: /tmp/abcrown_cuts
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    biccos:
      enabled: false
      constraint_strengthening: true
      recursively_strengthening: false
      drop_ratio: 0.5
      verified_bonus: 0.3
      max_infer_iter: 20
      heuristic: neuron_influence_score
      save_biccos_cuts: false
      multi_tree_branching:
        enabled: false
        restore_best_tree: false
        keep_n_best_domains: 1
        k_splits: 1
        iterations: 1
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: bbps
      disable: false
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      branching_point:
        db_path: branching_points.pt
        num_iterations: 1000
        batch_size: 1000000
        range_l: -5.0
        range_u: 5.0
        log_interval: 100
        step_size_1d: 0.01
        step_size: 0.2
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  sanity_check: null
  save_minimal_config: null
  save_minimal_config_omit_keys: []

Experiments at Thu Mar 27 08:55:11 2025 on C2D-S02
ResNet1D(
  (conv1): Conv1d(1, 32, kernel_size=(5,), stride=(1,), padding=(2,))
  (resblock1): ResidualBlock1D(
    (conv1): Conv1d(32, 32, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU()
    (conv2): Conv1d(32, 32, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu2): ReLU()
    (shortcut): Conv1d(32, 32, kernel_size=(5,), stride=(1,), padding=(2,))
  )
  (pool1): MaxPool1d(kernel_size=5, stride=2, padding=0, dilation=1, ceil_mode=False)
  (resblock2): ResidualBlock1D(
    (conv1): Conv1d(32, 32, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn1): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU()
    (conv2): Conv1d(32, 32, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn2): BatchNorm1d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu2): ReLU()
    (shortcut): Conv1d(32, 32, kernel_size=(5,), stride=(1,), padding=(2,))
  )
  (pool2): MaxPool1d(kernel_size=5, stride=2, padding=0, dilation=1, ceil_mode=False)
  (resblock3): ResidualBlock1D(
    (conv1): Conv1d(32, 64, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU()
    (conv2): Conv1d(64, 64, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu2): ReLU()
    (shortcut): Conv1d(32, 64, kernel_size=(5,), stride=(1,), padding=(2,))
  )
  (pool3): MaxPool1d(kernel_size=5, stride=2, padding=0, dilation=1, ceil_mode=False)
  (resblock4): ResidualBlock1D(
    (conv1): Conv1d(64, 64, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU()
    (conv2): Conv1d(64, 64, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn2): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu2): ReLU()
    (shortcut): Conv1d(64, 64, kernel_size=(5,), stride=(1,), padding=(2,))
  )
  (pool4): MaxPool1d(kernel_size=5, stride=2, padding=0, dilation=1, ceil_mode=False)
  (resblock5): ResidualBlock1D(
    (conv1): Conv1d(64, 128, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu1): ReLU()
    (conv2): Conv1d(128, 128, kernel_size=(5,), stride=(1,), padding=(2,))
    (bn2): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu2): ReLU()
    (shortcut): Conv1d(64, 128, kernel_size=(5,), stride=(1,), padding=(2,))
  )
  (pool5): MaxPool1d(kernel_size=5, stride=2, padding=0, dilation=1, ceil_mode=False)
  (flatten): Flatten(start_dim=1, end_dim=-1)
  (fc1): Linear(in_features=23936, out_features=512, bias=True)
  (relu1): ReLU()
  (fc2): Linear(in_features=512, out_features=512, bias=True)
  (relu2): ReLU()
  (fc3): Linear(in_features=512, out_features=5, bias=True)
  (softmax): Softmax(dim=1)
)
Parameters:
  conv1.weight: shape torch.Size([32, 1, 5])
  conv1.bias: shape torch.Size([32])
  resblock1.conv1.weight: shape torch.Size([32, 32, 5])
  resblock1.conv1.bias: shape torch.Size([32])
  resblock1.bn1.weight: shape torch.Size([32])
  resblock1.bn1.bias: shape torch.Size([32])
  resblock1.conv2.weight: shape torch.Size([32, 32, 5])
  resblock1.conv2.bias: shape torch.Size([32])
  resblock1.bn2.weight: shape torch.Size([32])
  resblock1.bn2.bias: shape torch.Size([32])
  resblock1.shortcut.weight: shape torch.Size([32, 32, 5])
  resblock1.shortcut.bias: shape torch.Size([32])
  resblock2.conv1.weight: shape torch.Size([32, 32, 5])
  resblock2.conv1.bias: shape torch.Size([32])
  resblock2.bn1.weight: shape torch.Size([32])
  resblock2.bn1.bias: shape torch.Size([32])
  resblock2.conv2.weight: shape torch.Size([32, 32, 5])
  resblock2.conv2.bias: shape torch.Size([32])
  resblock2.bn2.weight: shape torch.Size([32])
  resblock2.bn2.bias: shape torch.Size([32])
  resblock2.shortcut.weight: shape torch.Size([32, 32, 5])
  resblock2.shortcut.bias: shape torch.Size([32])
  resblock3.conv1.weight: shape torch.Size([64, 32, 5])
  resblock3.conv1.bias: shape torch.Size([64])
  resblock3.bn1.weight: shape torch.Size([64])
  resblock3.bn1.bias: shape torch.Size([64])
  resblock3.conv2.weight: shape torch.Size([64, 64, 5])
  resblock3.conv2.bias: shape torch.Size([64])
  resblock3.bn2.weight: shape torch.Size([64])
  resblock3.bn2.bias: shape torch.Size([64])
  resblock3.shortcut.weight: shape torch.Size([64, 32, 5])
  resblock3.shortcut.bias: shape torch.Size([64])
  resblock4.conv1.weight: shape torch.Size([64, 64, 5])
  resblock4.conv1.bias: shape torch.Size([64])
  resblock4.bn1.weight: shape torch.Size([64])
  resblock4.bn1.bias: shape torch.Size([64])
  resblock4.conv2.weight: shape torch.Size([64, 64, 5])
  resblock4.conv2.bias: shape torch.Size([64])
  resblock4.bn2.weight: shape torch.Size([64])
  resblock4.bn2.bias: shape torch.Size([64])
  resblock4.shortcut.weight: shape torch.Size([64, 64, 5])
  resblock4.shortcut.bias: shape torch.Size([64])
  resblock5.conv1.weight: shape torch.Size([128, 64, 5])
  resblock5.conv1.bias: shape torch.Size([128])
  resblock5.bn1.weight: shape torch.Size([128])
  resblock5.bn1.bias: shape torch.Size([128])
  resblock5.conv2.weight: shape torch.Size([128, 128, 5])
  resblock5.conv2.bias: shape torch.Size([128])
  resblock5.bn2.weight: shape torch.Size([128])
  resblock5.bn2.bias: shape torch.Size([128])
  resblock5.shortcut.weight: shape torch.Size([128, 64, 5])
  resblock5.shortcut.bias: shape torch.Size([128])
  fc1.weight: shape torch.Size([512, 23936])
  fc1.bias: shape torch.Size([512])
  fc2.weight: shape torch.Size([512, 512])
  fc2.bias: shape torch.Size([512])
  fc3.weight: shape torch.Size([5, 512])
  fc3.bias: shape torch.Size([5])
no customized start/end sample, testing all samples in instances.csv
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Precompiled vnnlib file found at ../safety_benchmarks/benchmarks/baseline/vnnlib/basic_prop.vnnlib.compiled
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.125, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[0., 0., 0., 1., 0.]], device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.24s/it]100%|██████████| 1/1 [00:01<00:00,  1.24s/it]
/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/operators/leaf.py:91: UserWarning: The "has_batchdim" option for BoundBuffers is deprecated. It may be removed from the next release.
  warnings.warn('The "has_batchdim" option for BoundBuffers is deprecated.'
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[0., 0., 0., 1., 0.]]], device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.,  0., -1.,  0., -1.,  0.,  0., -1., -1.,  0.]]], device='cuda:0')
number of violation:  5
Attack finished in 1.7011 seconds.
PGD attack failed
verified_status unknown
verified_success False
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundBuffers(name=/7, inputs=[], perturbed=False)
  (/8): BoundBuffers(name=/8, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundBuffers(name=/14, inputs=[], perturbed=False)
  (/15): BoundBuffers(name=/15, inputs=[], perturbed=False)
  (/17): BoundParams(name=/17, inputs=[], perturbed=False)
  (/18): BoundParams(name=/18, inputs=[], perturbed=False)
  (/19): BoundParams(name=/19, inputs=[], perturbed=False)
  (/20): BoundParams(name=/20, inputs=[], perturbed=False)
  (/21): BoundParams(name=/21, inputs=[], perturbed=False)
  (/22): BoundParams(name=/22, inputs=[], perturbed=False)
  (/23): BoundBuffers(name=/23, inputs=[], perturbed=False)
  (/24): BoundBuffers(name=/24, inputs=[], perturbed=False)
  (/26): BoundParams(name=/26, inputs=[], perturbed=False)
  (/27): BoundParams(name=/27, inputs=[], perturbed=False)
  (/28): BoundParams(name=/28, inputs=[], perturbed=False)
  (/29): BoundParams(name=/29, inputs=[], perturbed=False)
  (/30): BoundBuffers(name=/30, inputs=[], perturbed=False)
  (/31): BoundBuffers(name=/31, inputs=[], perturbed=False)
  (/33): BoundParams(name=/33, inputs=[], perturbed=False)
  (/34): BoundParams(name=/34, inputs=[], perturbed=False)
  (/35): BoundParams(name=/35, inputs=[], perturbed=False)
  (/36): BoundParams(name=/36, inputs=[], perturbed=False)
  (/37): BoundParams(name=/37, inputs=[], perturbed=False)
  (/38): BoundParams(name=/38, inputs=[], perturbed=False)
  (/39): BoundBuffers(name=/39, inputs=[], perturbed=False)
  (/40): BoundBuffers(name=/40, inputs=[], perturbed=False)
  (/42): BoundParams(name=/42, inputs=[], perturbed=False)
  (/43): BoundParams(name=/43, inputs=[], perturbed=False)
  (/44): BoundParams(name=/44, inputs=[], perturbed=False)
  (/45): BoundParams(name=/45, inputs=[], perturbed=False)
  (/46): BoundBuffers(name=/46, inputs=[], perturbed=False)
  (/47): BoundBuffers(name=/47, inputs=[], perturbed=False)
  (/49): BoundParams(name=/49, inputs=[], perturbed=False)
  (/50): BoundParams(name=/50, inputs=[], perturbed=False)
  (/51): BoundParams(name=/51, inputs=[], perturbed=False)
  (/52): BoundParams(name=/52, inputs=[], perturbed=False)
  (/53): BoundParams(name=/53, inputs=[], perturbed=False)
  (/54): BoundParams(name=/54, inputs=[], perturbed=False)
  (/55): BoundBuffers(name=/55, inputs=[], perturbed=False)
  (/56): BoundBuffers(name=/56, inputs=[], perturbed=False)
  (/58): BoundParams(name=/58, inputs=[], perturbed=False)
  (/59): BoundParams(name=/59, inputs=[], perturbed=False)
  (/60): BoundParams(name=/60, inputs=[], perturbed=False)
  (/61): BoundParams(name=/61, inputs=[], perturbed=False)
  (/62): BoundBuffers(name=/62, inputs=[], perturbed=False)
  (/63): BoundBuffers(name=/63, inputs=[], perturbed=False)
  (/65): BoundParams(name=/65, inputs=[], perturbed=False)
  (/66): BoundParams(name=/66, inputs=[], perturbed=False)
  (/67): BoundParams(name=/67, inputs=[], perturbed=False)
  (/68): BoundParams(name=/68, inputs=[], perturbed=False)
  (/69): BoundParams(name=/69, inputs=[], perturbed=False)
  (/70): BoundParams(name=/70, inputs=[], perturbed=False)
  (/71): BoundBuffers(name=/71, inputs=[], perturbed=False)
  (/72): BoundBuffers(name=/72, inputs=[], perturbed=False)
  (/74): BoundParams(name=/74, inputs=[], perturbed=False)
  (/75): BoundParams(name=/75, inputs=[], perturbed=False)
  (/76): BoundParams(name=/76, inputs=[], perturbed=False)
  (/77): BoundParams(name=/77, inputs=[], perturbed=False)
  (/78): BoundBuffers(name=/78, inputs=[], perturbed=False)
  (/79): BoundBuffers(name=/79, inputs=[], perturbed=False)
  (/81): BoundParams(name=/81, inputs=[], perturbed=False)
  (/82): BoundParams(name=/82, inputs=[], perturbed=False)
  (/83): BoundParams(name=/83, inputs=[], perturbed=False)
  (/84): BoundParams(name=/84, inputs=[], perturbed=False)
  (/85): BoundParams(name=/85, inputs=[], perturbed=False)
  (/86): BoundParams(name=/86, inputs=[], perturbed=False)
  (/87): BoundParams(name=/87, inputs=[], perturbed=False)
  (/88): BoundParams(name=/88, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/90): BoundConv(name=/90, inputs=[/input, /17, /18], perturbed=True)
  (/input-4): BoundConv(name=/input-4, inputs=[/input, /3, /4], perturbed=True)
  (/input-8): BoundBatchNormalization(name=/input-8, inputs=[/input-4, /5, /6, /7, /8], perturbed=True)
  (/input-12): BoundRelu(name=/input-12, inputs=[/input-8], perturbed=True)
  (/input-16): BoundConv(name=/input-16, inputs=[/input-12, /10, /11], perturbed=True)
  (/95): BoundBatchNormalization(name=/95, inputs=[/input-16, /12, /13, /14, /15], perturbed=True)
  (/96): BoundAdd(name=/96, inputs=[/95, /90], perturbed=True)
  (/input-20): BoundRelu(name=/input-20, inputs=[/96], perturbed=True)
  (/98): BoundConv(name=/98, inputs=[/input-20, /33, /34], perturbed=True)
  (/input-24): BoundConv(name=/input-24, inputs=[/input-20, /19, /20], perturbed=True)
  (/input-28): BoundBatchNormalization(name=/input-28, inputs=[/input-24, /21, /22, /23, /24], perturbed=True)
  (/input-32): BoundRelu(name=/input-32, inputs=[/input-28], perturbed=True)
  (/input-36): BoundConv(name=/input-36, inputs=[/input-32, /26, /27], perturbed=True)
  (/103): BoundBatchNormalization(name=/103, inputs=[/input-36, /28, /29, /30, /31], perturbed=True)
  (/104): BoundAdd(name=/104, inputs=[/103, /98], perturbed=True)
  (/input-40): BoundRelu(name=/input-40, inputs=[/104], perturbed=True)
  (/106): BoundConv(name=/106, inputs=[/input-40, /49, /50], perturbed=True)
  (/input-44): BoundConv(name=/input-44, inputs=[/input-40, /35, /36], perturbed=True)
  (/input-48): BoundBatchNormalization(name=/input-48, inputs=[/input-44, /37, /38, /39, /40], perturbed=True)
  (/input-52): BoundRelu(name=/input-52, inputs=[/input-48], perturbed=True)
  (/input-56): BoundConv(name=/input-56, inputs=[/input-52, /42, /43], perturbed=True)
  (/111): BoundBatchNormalization(name=/111, inputs=[/input-56, /44, /45, /46, /47], perturbed=True)
  (/112): BoundAdd(name=/112, inputs=[/111, /106], perturbed=True)
  (/input-60): BoundRelu(name=/input-60, inputs=[/112], perturbed=True)
  (/114): BoundConv(name=/114, inputs=[/input-60, /65, /66], perturbed=True)
  (/input-64): BoundConv(name=/input-64, inputs=[/input-60, /51, /52], perturbed=True)
  (/input-68): BoundBatchNormalization(name=/input-68, inputs=[/input-64, /53, /54, /55, /56], perturbed=True)
  (/input-72): BoundRelu(name=/input-72, inputs=[/input-68], perturbed=True)
  (/input-76): BoundConv(name=/input-76, inputs=[/input-72, /58, /59], perturbed=True)
  (/119): BoundBatchNormalization(name=/119, inputs=[/input-76, /60, /61, /62, /63], perturbed=True)
  (/120): BoundAdd(name=/120, inputs=[/119, /114], perturbed=True)
  (/input-80): BoundRelu(name=/input-80, inputs=[/120], perturbed=True)
  (/122): BoundConv(name=/122, inputs=[/input-80, /81, /82], perturbed=True)
  (/input-84): BoundConv(name=/input-84, inputs=[/input-80, /67, /68], perturbed=True)
  (/input-88): BoundBatchNormalization(name=/input-88, inputs=[/input-84, /69, /70, /71, /72], perturbed=True)
  (/input-92): BoundRelu(name=/input-92, inputs=[/input-88], perturbed=True)
  (/input-96): BoundConv(name=/input-96, inputs=[/input-92, /74, /75], perturbed=True)
  (/127): BoundBatchNormalization(name=/127, inputs=[/input-96, /76, /77, /78, /79], perturbed=True)
  (/128): BoundAdd(name=/128, inputs=[/127, /122], perturbed=True)
  (/129): BoundRelu(name=/129, inputs=[/128], perturbed=True)
  (/130): BoundFlatten(name=/130, inputs=[/129], perturbed=True)
  (/input-100): BoundLinear(name=/input-100, inputs=[/130, /83, /84], perturbed=True)
  (/132): BoundRelu(name=/132, inputs=[/input-100], perturbed=True)
  (/input-104): BoundLinear(name=/input-104, inputs=[/132, /85, /86], perturbed=True)
  (/134): BoundRelu(name=/134, inputs=[/input-104], perturbed=True)
  (/input-108): BoundLinear(name=/input-108, inputs=[/134, /87, /88], perturbed=True)
  (/136/split/1): BoundReduceMax(name=/136/split/1, inputs=[/input-108], perturbed=True)
  (/136/split/2): BoundConstant(name=/136/split/2, value=tensor([1], device='cuda:0'))
  (/136/split/3): BoundUnsqueeze(name=/136/split/3, inputs=[/136/split/1, /136/split/2], perturbed=True)
  (/136/split/4): BoundSub(name=/136/split/4, inputs=[/input-108, /136/split/3], perturbed=True)
  (/136/split/5): BoundExp(name=/136/split/5, inputs=[/136/split/4], perturbed=True)
  (/136/split/6): BoundConstant(name=/136/split/6, value=tensor([1], device='cuda:0'))
  (/136/split/7): BoundReduceSum(name=/136/split/7, inputs=[/136/split/5, /136/split/6], perturbed=True)
  (/136/reciprocal): BoundReciprocal(name=/136/reciprocal, inputs=[/136/split/7], perturbed=True)
  (/136/mul): BoundMul(name=/136/mul, inputs=[/136/split/5, /136/reciprocal], perturbed=True)
)
Original output: tensor([[0., 0., 0., 1., 0.]], device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/input-20, inputs=[/96], perturbed=True)
   BoundRelu(name=/input-32, inputs=[/input-28], perturbed=True)
   BoundRelu(name=/input-40, inputs=[/104], perturbed=True)
   BoundRelu(name=/input-52, inputs=[/input-48], perturbed=True)
   BoundRelu(name=/input-60, inputs=[/112], perturbed=True)
   BoundRelu(name=/input-72, inputs=[/input-68], perturbed=True)
   BoundRelu(name=/input-80, inputs=[/120], perturbed=True)
   BoundRelu(name=/input-92, inputs=[/input-88], perturbed=True)
   BoundRelu(name=/129, inputs=[/128], perturbed=True)
   BoundRelu(name=/132, inputs=[/input-100], perturbed=True)
   BoundRelu(name=/134, inputs=[/input-104], perturbed=True)
   BoundExp(name=/136/split/5, inputs=[/136/split/4], perturbed=True)
   BoundReciprocal(name=/136/reciprocal, inputs=[/136/split/7], perturbed=True)
   BoundMul(name=/136/mul, inputs=[/136/split/5, /136/reciprocal], perturbed=True)
Traceback (most recent call last):
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/NN-ECG-classification-Verifier/safety_benchmarks/../../abcrown_safety/alpha-beta-CROWN/complete_verifier/abcrown.py", line 823, in <module>
    abcrown.main()
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/NN-ECG-classification-Verifier/safety_benchmarks/../../abcrown_safety/alpha-beta-CROWN/complete_verifier/abcrown.py", line 739, in main
    incomplete_verification_output = self.incomplete_verifier(
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/NN-ECG-classification-Verifier/safety_benchmarks/../../abcrown_safety/alpha-beta-CROWN/complete_verifier/abcrown.py", line 160, in incomplete_verifier
    global_lb, ret = model.build(
                     ^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/beta_CROWN_solver.py", line 481, in build
    lb, ub, aux_reference_bounds = self.net.init_alpha(
                                   ^^^^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/optimized_bounds.py", line 865, in init_alpha
    l, u = self.compute_bounds(
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 1402, in compute_bounds
    return self._compute_bounds_main(C=C,
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 1500, in _compute_bounds_main
    self.check_prior_bounds(final, C=C)
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 947, in check_prior_bounds
    self.check_prior_bounds(n)
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 947, in check_prior_bounds
    self.check_prior_bounds(n)
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 947, in check_prior_bounds
    self.check_prior_bounds(n)
  [Previous line repeated 38 more times]
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 965, in check_prior_bounds
    self.compute_intermediate_bounds(
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/bound_general.py", line 1049, in compute_intermediate_bounds
    node.lower, node.upper = self.backward_general(
                             ^^^^^^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/backward_bound.py", line 282, in backward_general
    A, lower_b, upper_b = l.bound_backward(
                          ^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/operators/normalization.py", line 199, in bound_backward
    lA, lbias = _bound_oneside(last_lA)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/stephano/snap/snapd-desktop-integration/253/Gabriel/Projetos/Ana/abcrown_safety/alpha-beta-CROWN/complete_verifier/auto_LiRPA/operators/normalization.py", line 179, in _bound_oneside
    patches = patches.expand(-1, -1, last_A.output_shape[2], last_A.output_shape[3], -1, 1, 1)
                                                             ~~~~~~~~~~~~~~~~~~~^^^
IndexError: list index out of range
